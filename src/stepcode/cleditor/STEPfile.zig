// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

pub const FileTypeCode = extern struct {
    bits: c_int = 0,

    pub const VERSION_OLD: FileTypeCode = .{ .bits = -1 };
    pub const VERSION_UNKNOWN: FileTypeCode = .{ .bits = 0 };
    pub const VERSION_CURRENT: FileTypeCode = .{ .bits = 1 };
    pub const WORKING_SESSION: FileTypeCode = .{ .bits = 2 };

    // pub usingnamespace cpp.FlagsMixin(FileTypeCode);
};

pub const STEPfile = extern struct {
    vtable: *const anyopaque,

    _instances: *InstMgr,
    _reg: *Registry,
/// Increment value to be added to FileId Numbers on input
    _fileIdIncr: c_int,
    _headerInstances: [*c]InstMgr,
    _headerRegistry: [*c]Registry,
/// STEPfile_id given to SDAI_Application_instance from header section
    _headerId: c_int,
    _currentDir: [*c]DirObj,
    _fileName: cpp.String,
/// input file size
    _iFileSize: std::ifstream::pos_type,
/// input file position (from ifstream::tellg())
    _iFileCurrentPosition: std::ifstream::pos_type,
/// set immediately before ReadData1() returns
    _iFileStage1Done: bool,
/// number of instances that have been written
    _oFileInstsWritten: c_int,
    _error: ErrorDescriptor,
/// num entities not created in first pass
    _entsNotCreated: c_int,
/// num entities that had invalid attr values
    _entsInvalid: c_int,
/// num entities that had missing attr values
///                                  (includes entities that had invalid values
///                                  for required attrs)
    _entsIncomplete: c_int,
/// num entities that may have had problems
///                                  with attrs - reported as an attr user msg 
    _entsWarning: c_int,
    _errorCount: c_int,
    _warningCount: c_int,
    _maxErrorCount: c_int,
/// If false, "missing and required" attributes are replaced with a generic value when file is read
    _strict: bool,
/// Defaults to false; if true, info is always printed to stdout.
    _verbose: bool,
    _fileType: FileTypeCode,
    ENTITY_NAME_DELIM: u8,
    FILE_DELIM: cpp.String,
    END_FILE_DELIM: cpp.String,

pub fn instances(self: *STEPfile) *InstMgr {
    return self._instances;
}
pub fn reg(self: *STEPfile) *Registry {
    return self._reg;
}
pub fn HeaderInstances(self: *STEPfile) [*c]InstMgr {
    return self._headerInstances;
}
pub fn HeaderRegistry(self: *STEPfile) [*c]const Registry {
    return self._headerRegistry;
}
extern fn @"_1_STEPfile_HeaderDefaultFileName_"(self: *STEPfile) [*c]SDAI_Application_instance;
pub const HeaderDefaultFileName = @"_1_STEPfile_HeaderDefaultFileName_";

extern fn @"_1_STEPfile_HeaderDefaultFileDescription_"(self: *STEPfile) [*c]SDAI_Application_instance;
pub const HeaderDefaultFileDescription = @"_1_STEPfile_HeaderDefaultFileDescription_";

extern fn @"_1_STEPfile_HeaderDefaultFileSchema_"(self: *STEPfile) [*c]SDAI_Application_instance;
pub const HeaderDefaultFileSchema = @"_1_STEPfile_HeaderDefaultFileSchema_";

pub fn FileName(self: *const STEPfile) cpp.String {
    return;
}
extern fn @"_1_STEPfile_SetFileName_"(self: *STEPfile, name: cpp.String) cpp.String;
pub fn SetFileName(self: *STEPfile, __opt: struct { name: cpp.String = ,  },) cpp.String {
    return @"_1_STEPfile_SetFileName_"(self, __opt.name);
}

extern fn @"_1_STEPfile_TruncFileName_"(self: *const STEPfile, name: cpp.String) cpp.String;
pub const TruncFileName = @"_1_STEPfile_TruncFileName_";

extern fn @"_1_STEPfile_GetReadProgress_"(self: *const STEPfile) f32;
pub const GetReadProgress = @"_1_STEPfile_GetReadProgress_";

extern fn @"_1_STEPfile_GetWriteProgress_"(self: *const STEPfile) f32;
pub const GetWriteProgress = @"_1_STEPfile_GetWriteProgress_";

pub fn Error(self: *STEPfile) *ErrorDescriptor {
    return self._error;
}
pub fn ErrorCount(self: *const STEPfile) c_int {
    return self._errorCount;
}
pub fn WarningCount(self: *const STEPfile) c_int {
    return self._warningCount;
}
extern fn @"_1_STEPfile_AppendEntityErrorMsg_"(self: *STEPfile, e: [*c]ErrorDescriptor) Severity;
pub const AppendEntityErrorMsg = @"_1_STEPfile_AppendEntityErrorMsg_";

pub fn FileType(self: *const STEPfile) FileTypeCode {
    return self._fileType;
}
pub fn FileType__Overload2(self: *STEPfile, ft: FileTypeCode) void {
    self._fileType = ft;
}
extern fn @"_1_STEPfile_SetFileType_"(self: *STEPfile, ft: FileTypeCode) c_int;
pub fn SetFileType(self: *STEPfile, __opt: struct { ft: FileTypeCode = FileTypeCode.VERSION_CURRENT.bits,  },) c_int {
    return @"_1_STEPfile_SetFileType_"(self, __opt.ft);
}

extern fn @"_1_STEPfile_ReadExchangeFile_"(self: *STEPfile, filename: cpp.String, useTechCor: bool) Severity;
pub fn ReadExchangeFile(self: *STEPfile, __opt: struct { filename: cpp.String = , useTechCor: bool = ((1) != 0),  },) Severity {
    return @"_1_STEPfile_ReadExchangeFile_"(self, __opt.filename, __opt.useTechCor);
}

extern fn @"_1_STEPfile_AppendExchangeFile_"(self: *STEPfile, filename: cpp.String, useTechCor: bool) Severity;
pub fn AppendExchangeFile(self: *STEPfile, __opt: struct { filename: cpp.String = , useTechCor: bool = ((1) != 0),  },) Severity {
    return @"_1_STEPfile_AppendExchangeFile_"(self, __opt.filename, __opt.useTechCor);
}

extern fn @"_1_STEPfile_ReadWorkingFile_"(self: *STEPfile, filename: cpp.String, useTechCor: bool) Severity;
pub fn ReadWorkingFile(self: *STEPfile, __opt: struct { filename: cpp.String = , useTechCor: bool = ((1) != 0),  },) Severity {
    return @"_1_STEPfile_ReadWorkingFile_"(self, __opt.filename, __opt.useTechCor);
}

extern fn @"_1_STEPfile_AppendWorkingFile_"(self: *STEPfile, filename: cpp.String, useTechCor: bool) Severity;
pub fn AppendWorkingFile(self: *STEPfile, __opt: struct { filename: cpp.String = , useTechCor: bool = ((1) != 0),  },) Severity {
    return @"_1_STEPfile_AppendWorkingFile_"(self, __opt.filename, __opt.useTechCor);
}

extern fn @"_1_STEPfile_AppendFile_"(self: *STEPfile, in: [*c]istream, useTechCor: bool) Severity;
pub fn AppendFile(self: *STEPfile, in: [*c]istream, __opt: struct { useTechCor: bool = ((1) != 0),  },) Severity {
    return @"_1_STEPfile_AppendFile_"(self, in, __opt.useTechCor);
}

extern fn @"_1_STEPfile_WriteExchangeFile_"(self: *STEPfile, out: *ostream, validate: c_int, clearError: c_int, writeComments: c_int) Severity;
pub fn WriteExchangeFile(self: *STEPfile, out: *ostream, __opt: struct { validate: c_int = 1, clearError: c_int = 1, writeComments: c_int = 1,  },) Severity {
    return @"_1_STEPfile_WriteExchangeFile_"(self, out, __opt.validate, __opt.clearError, __opt.writeComments);
}

extern fn @"_2_STEPfile_WriteExchangeFile_"(self: *STEPfile, filename: cpp.String, validate: c_int, clearError: c_int, writeComments: c_int) Severity;
pub fn WriteExchangeFile__Overload2(self: *STEPfile, __opt: struct { filename: cpp.String = , validate: c_int = 1, clearError: c_int = 1, writeComments: c_int = 1,  },) Severity {
    return @"_2_STEPfile_WriteExchangeFile_"(self, __opt.filename, __opt.validate, __opt.clearError, __opt.writeComments);
}

extern fn @"_1_STEPfile_WriteValuePairsFile_"(self: *STEPfile, out: *ostream, validate: c_int, clearError: c_int, writeComments: c_int, mixedCase: c_int) Severity;
pub fn WriteValuePairsFile(self: *STEPfile, out: *ostream, __opt: struct { validate: c_int = 1, clearError: c_int = 1, writeComments: c_int = 1, mixedCase: c_int = 1,  },) Severity {
    return @"_1_STEPfile_WriteValuePairsFile_"(self, out, __opt.validate, __opt.clearError, __opt.writeComments, __opt.mixedCase);
}

extern fn @"_1_STEPfile_WriteWorkingFile_"(self: *STEPfile, out: *ostream, clearError: c_int, writeComments: c_int) Severity;
pub fn WriteWorkingFile(self: *STEPfile, out: *ostream, __opt: struct { clearError: c_int = 1, writeComments: c_int = 1,  },) Severity {
    return @"_1_STEPfile_WriteWorkingFile_"(self, out, __opt.clearError, __opt.writeComments);
}

extern fn @"_2_STEPfile_WriteWorkingFile_"(self: *STEPfile, filename: cpp.String, clearError: c_int, writeComments: c_int) Severity;
pub fn WriteWorkingFile__Overload2(self: *STEPfile, __opt: struct { filename: cpp.String = , clearError: c_int = 1, writeComments: c_int = 1,  },) Severity {
    return @"_2_STEPfile_WriteWorkingFile_"(self, __opt.filename, __opt.clearError, __opt.writeComments);
}

extern fn @"_1_STEPfile_EntityWfState_"(self: *STEPfile, c: u8) stateEnum;
pub const EntityWfState = @"_1_STEPfile_EntityWfState_";

extern fn @"_1_STEPfile_Renumber_"(self: *STEPfile) void;
pub const Renumber = @"_1_STEPfile_Renumber_";

extern fn @"_1_STEPfile_init_"(r: *Registry, i: *InstMgr, filename: cpp.String, strict: bool) STEPfile;
pub const init = @"_1_STEPfile_init_";

) STEPfile;
pub const init = @"_1_STEPfile_init_";

    extern fn @"_1_STEPfile_deinit_"(self: *STEPfile) void;
    pub const deinit = @"_1_STEPfile_deinit_";

extern fn @"_1_STEPfile_schemaName_"(self: *STEPfile) cpp.String;
pub const schemaName = @"_1_STEPfile_schemaName_";

extern fn @"_1_STEPfile_OpenInputFile_"(self: *STEPfile, filename: cpp.String) [*c]istream;
pub fn OpenInputFile(self: *STEPfile, __opt: struct { filename: cpp.String = ,  },) [*c]istream {
    return @"_1_STEPfile_OpenInputFile_"(self, __opt.filename);
}

extern fn @"_1_STEPfile_CloseInputFile_"(self: *STEPfile, in: [*c]istream) void;
pub const CloseInputFile = @"_1_STEPfile_CloseInputFile_";

extern fn @"_1_STEPfile_ReadHeader_"(self: *STEPfile, in: *istream) Severity;
pub const ReadHeader = @"_1_STEPfile_ReadHeader_";

extern fn @"_1_STEPfile_HeaderVerifyInstances_"(self: *STEPfile, im: [*c]InstMgr) Severity;
pub const HeaderVerifyInstances = @"_1_STEPfile_HeaderVerifyInstances_";

extern fn @"_1_STEPfile_HeaderMergeInstances_"(self: *STEPfile, im: [*c]InstMgr) void;
pub const HeaderMergeInstances = @"_1_STEPfile_HeaderMergeInstances_";

extern fn @"_1_STEPfile_HeaderId_"(self: *STEPfile, increment: c_int) c_int;
pub fn HeaderId(self: *STEPfile, __opt: struct { increment: c_int = 1,  },) c_int {
    return @"_1_STEPfile_HeaderId_"(self, __opt.increment);
}

extern fn @"_2_STEPfile_HeaderId_"(self: *STEPfile, nm: [*c]const u8) c_int;
pub fn HeaderId__Overload2(self: *STEPfile, __opt: struct { nm: [*c]const u8 = &"\"\\000\"",  },) c_int {
    return @"_2_STEPfile_HeaderId_"(self, __opt.nm);
}

extern fn @"_1_STEPfile_ReadData1_"(self: *STEPfile, in: *istream) c_int;
pub const ReadData1 = @"_1_STEPfile_ReadData1_";

extern fn @"_1_STEPfile_ReadData2_"(self: *STEPfile, in: *istream, useTechCor: bool) c_int;
pub fn ReadData2(self: *STEPfile, in: *istream, __opt: struct { useTechCor: bool = true,  },) c_int {
    return @"_1_STEPfile_ReadData2_"(self, in, __opt.useTechCor);
}

extern fn @"_1_STEPfile_ReadWorkingData1_"(self: *STEPfile, in: *istream) c_int;
pub const ReadWorkingData1 = @"_1_STEPfile_ReadWorkingData1_";

extern fn @"_1_STEPfile_ReadWorkingData2_"(self: *STEPfile, in: *istream, useTechCor: bool) c_int;
pub fn ReadWorkingData2(self: *STEPfile, in: *istream, __opt: struct { useTechCor: bool = true,  },) c_int {
    return @"_1_STEPfile_ReadWorkingData2_"(self, in, __opt.useTechCor);
}

extern fn @"_1_STEPfile_ReadRestOfFile_"(self: *STEPfile, in: *istream) void;
pub const ReadRestOfFile = @"_1_STEPfile_ReadRestOfFile_";

extern fn @"_1_STEPfile_CreateInstance_"(self: *STEPfile, in: *istream, out: *ostream) [*c]SDAI_Application_instance;
/// create instance - used by ReadData1()
pub const CreateInstance = @"_1_STEPfile_CreateInstance_";

extern fn @"_1_STEPfile_CreateSubSuperInstance_"(self: *STEPfile, in: *istream, fileid: c_int, __arg2: *ErrorDescriptor) [*c]SDAI_Application_instance;
/// create complex instance - used by CreateInstance()
pub const CreateSubSuperInstance = @"_1_STEPfile_CreateSubSuperInstance_";

extern fn @"_1_STEPfile_ReadInstance_"(self: *STEPfile, in: *istream, out: *ostream, cmtStr: *cpp.String, useTechCor: bool) [*c]SDAI_Application_instance;
pub fn ReadInstance(self: *STEPfile, in: *istream, out: *ostream, cmtStr: *cpp.String, __opt: struct { useTechCor: bool = true,  },) [*c]SDAI_Application_instance {
    return @"_1_STEPfile_ReadInstance_"(self, in, out, cmtStr, __opt.useTechCor);
}

extern fn @"_1_STEPfile_CreateScopeInstances_"(self: *STEPfile, in: *istream, scopelist: [*c][*c]SDAI_Application_instance_ptr) Severity;
///  reading scopes are still incomplete, CreateScopeInstances and ReadScopeInstances are stubs
pub const CreateScopeInstances = @"_1_STEPfile_CreateScopeInstances_";

extern fn @"_1_STEPfile_ReadScopeInstances_"(self: *STEPfile, in: *istream) Severity;
pub const ReadScopeInstances = @"_1_STEPfile_ReadScopeInstances_";

extern fn @"_1_STEPfile_FindDataSection_"(self: *STEPfile, in: *istream) c_int;
pub const FindDataSection = @"_1_STEPfile_FindDataSection_";

extern fn @"_1_STEPfile_FindHeaderSection_"(self: *STEPfile, in: *istream) c_int;
pub const FindHeaderSection = @"_1_STEPfile_FindHeaderSection_";

extern fn @"_1_STEPfile_WriteWorkingData_"(self: *STEPfile, out: *ostream, writeComments: c_int) void;
pub fn WriteWorkingData(self: *STEPfile, out: *ostream, __opt: struct { writeComments: c_int = 1,  },) void {
    return @"_1_STEPfile_WriteWorkingData_"(self, out, __opt.writeComments);
}

extern fn @"_1_STEPfile_OpenOutputFile_"(self: *STEPfile, filename: cpp.String) [*c]ofstream;
pub fn OpenOutputFile(self: *STEPfile, __opt: struct { filename: cpp.String = ,  },) [*c]ofstream {
    return @"_1_STEPfile_OpenOutputFile_"(self, __opt.filename);
}

extern fn @"_1_STEPfile_CloseOutputFile_"(self: *STEPfile, out: [*c]ostream) void;
pub const CloseOutputFile = @"_1_STEPfile_CloseOutputFile_";

extern fn @"_1_STEPfile_WriteHeader_"(self: *STEPfile, out: *ostream) void;
pub const WriteHeader = @"_1_STEPfile_WriteHeader_";

extern fn @"_1_STEPfile_WriteHeaderInstance_"(self: *STEPfile, obj: [*c]SDAI_Application_instance, out: *ostream) void;
pub const WriteHeaderInstance = @"_1_STEPfile_WriteHeaderInstance_";

extern fn @"_1_STEPfile_WriteHeaderInstanceFileName_"(self: *STEPfile, out: *ostream) void;
pub const WriteHeaderInstanceFileName = @"_1_STEPfile_WriteHeaderInstanceFileName_";

extern fn @"_1_STEPfile_WriteHeaderInstanceFileDescription_"(self: *STEPfile, out: *ostream) void;
pub const WriteHeaderInstanceFileDescription = @"_1_STEPfile_WriteHeaderInstanceFileDescription_";

extern fn @"_1_STEPfile_WriteHeaderInstanceFileSchema_"(self: *STEPfile, out: *ostream) void;
pub const WriteHeaderInstanceFileSchema = @"_1_STEPfile_WriteHeaderInstanceFileSchema_";

extern fn @"_1_STEPfile_WriteData_"(self: *STEPfile, out: *ostream, writeComments: c_int) void;
pub fn WriteData(self: *STEPfile, out: *ostream, __opt: struct { writeComments: c_int = 1,  },) void {
    return @"_1_STEPfile_WriteData_"(self, out, __opt.writeComments);
}

extern fn @"_1_STEPfile_WriteValuePairsData_"(self: *STEPfile, out: *ostream, writeComments: c_int, mixedCase: c_int) void;
pub fn WriteValuePairsData(self: *STEPfile, out: *ostream, __opt: struct { writeComments: c_int = 1, mixedCase: c_int = 1,  },) void {
    return @"_1_STEPfile_WriteValuePairsData_"(self, out, __opt.writeComments, __opt.mixedCase);
}

extern fn @"_1_STEPfile_IncrementFileId_"(self: *STEPfile, fileid: c_int) c_int;
pub const IncrementFileId = @"_1_STEPfile_IncrementFileId_";

pub fn FileIdIncr(self: *STEPfile) c_int {
    return self._fileIdIncr;
}
extern fn @"_1_STEPfile_SetFileIdIncrement_"(self: *STEPfile) void;
pub const SetFileIdIncrement = @"_1_STEPfile_SetFileIdIncrement_";

extern fn @"_1_STEPfile_MakeBackupFile_"(self: *STEPfile) void;
pub const MakeBackupFile = @"_1_STEPfile_MakeBackupFile_";

};

