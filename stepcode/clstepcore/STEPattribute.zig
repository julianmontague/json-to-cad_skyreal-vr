// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

extern fn @"_1_SetErrOnNull_"(attrValue: [*c]const u8, error: [*c]ErrorDescriptor) c_int;
pub const SetErrOnNull = @"_1_SetErrOnNull_";

extern fn @"_1_ReadEntityRef_"(in: *istream, err: [*c]ErrorDescriptor, tokenList: [*c]const u8, instances: [*c]InstMgrBase, addFileId: c_int) [*c]SDAI_Application_instance;
pub const ReadEntityRef = @"_1_ReadEntityRef_";

extern fn @"_2_ReadEntityRef_"(s: [*c]const u8, err: [*c]ErrorDescriptor, tokenList: [*c]const u8, instances: [*c]InstMgrBase, addFileId: c_int) [*c]SDAI_Application_instance;
pub const ReadEntityRef__Overload2 = @"_2_ReadEntityRef_";

extern fn @"_1_EntityValidLevel_"(se: [*c]SDAI_Application_instance, ed: [*c]const TypeDescriptor, err: [*c]ErrorDescriptor) Severity;
pub const EntityValidLevel = @"_1_EntityValidLevel_";

extern fn @"_2_EntityValidLevel_"(attrValue: [*c]const u8, ed: [*c]const TypeDescriptor, err: [*c]ErrorDescriptor, im: [*c]InstMgrBase, clearError: c_int) Severity;
pub const EntityValidLevel__Overload2 = @"_2_EntityValidLevel_";

extern fn @"_1_STEPread_reference_"(s: [*c]const u8, err: [*c]ErrorDescriptor, instances: [*c]InstMgrBase, addFileId: c_int) [*c]SDAI_Application_instance;
////////////////////
////////////////////
pub const STEPread_reference = @"_1_STEPread_reference_";

extern fn @"_1_QuoteInString_"(in: *istream) c_int;
////////////////////
pub const QuoteInString = @"_1_QuoteInString_";

extern fn @"_1_AppendChar_"(c: u8, index: *c_int, s: *[*c]u8, sSize: *c_int) void;
pub const AppendChar = @"_1_AppendChar_";

extern fn @"_1_PushPastString_"(in: *istream, s: *cpp.String, err: [*c]ErrorDescriptor) void;
pub const PushPastString = @"_1_PushPastString_";

extern fn @"_1_PushPastImbedAggr_"(in: *istream, s: *cpp.String, err: [*c]ErrorDescriptor) void;
pub const PushPastImbedAggr = @"_1_PushPastImbedAggr_";

extern fn @"_1_PushPastAggr1Dim_"(in: *istream, s: *cpp.String, err: [*c]ErrorDescriptor) void;
pub const PushPastAggr1Dim = @"_1_PushPastAggr1Dim_";

pub const STEPattribute = extern struct {
/// 
///* You know which of these to use based on the return value of
///* NonRefType() - see below. BASE_TYPE is defined in baseType.h
///* This variable points to an appropriate member variable in the entity
///* class in the generated schema class library (the entity class is
///* inherited from SDAI_Application_instance)
pub const attrUnion = extern struct {
    S: [*c]SDAI_String,
    i: [*c]SDAI_Integer,
    b: [*c]SDAI_Binary,
    r: [*c]SDAI_Real,
    c: [*c][*c]SDAI_Application_instance,
    a: [*c]STEPaggregate,
    e: [*c]SDAI_Enum,
    sh: [*c]SDAI_Select,
    u: [*c]SCLundefined,
    p: ?*anyopaque,
};

    ptr: union attrUnion,
    _derive: bool,
    _mustDeletePtr: bool,
///if a member uses new to create an object in ptr
    _error: ErrorDescriptor,
    _redefAttr: [*c]STEPattribute,
    aDesc: [*c]const AttrDescriptor,
    refCount: c_int,

extern fn @"_1_STEPattribute_shiftLeft_"(__arg0: *ostream, __arg1: *STEPattribute) *ostream;
pub const shiftLeft = @"_1_STEPattribute_shiftLeft_";

extern fn @"_1_STEPattribute_SkipBadAttr_"(self: *STEPattribute, in: *istream, StopChars: [*c]u8) u8;
pub const SkipBadAttr = @"_1_STEPattribute_SkipBadAttr_";

extern fn @"_1_STEPattribute_AddErrorInfo_"(self: *STEPattribute) void;
pub const AddErrorInfo = @"_1_STEPattribute_AddErrorInfo_";

extern fn @"_1_STEPattribute_STEPwriteError_"(self: *STEPattribute, out: *ostream, line: c_uint, desc: [*c]const u8) void;
pub const STEPwriteError = @"_1_STEPattribute_STEPwriteError_";

pub fn incrRefCount(self: *STEPattribute) void {
    self.refCount += 1;
}
pub fn decrRefCount(self: *STEPattribute) void {
    self.refCount -= 1;
}
pub fn getRefCount(self: *STEPattribute) c_int {
    return self.refCount;
}
pub fn getADesc(self: *STEPattribute) [*c]const AttrDescriptor {
    return self.aDesc;
}
pub fn Derive(self: *STEPattribute, n: bool) void {
    self._derive = n;
}
pub fn RedefiningAttr(self: *STEPattribute, a: [*c]STEPattribute) void {
    self._redefAttr = a;
}
extern fn @"_1_STEPattribute_StrToVal_"(self: *STEPattribute, s: [*c]const u8, instances: [*c]InstMgrBase, addFileId: c_int) Severity;
///////////// Read, Write, Assign attr value
pub fn StrToVal(self: *STEPattribute, s: [*c]const u8, __opt: struct { instances: [*c]InstMgrBase = null, addFileId: c_int = 0,  },) Severity {
    return @"_1_STEPattribute_StrToVal_"(self, s, __opt.instances, __opt.addFileId);
}

extern fn @"_1_STEPattribute_STEPread_"(self: *STEPattribute, in: *istream, instances: [*c]InstMgrBase, addFileId: c_int, currSch: [*c]const u8, strict: bool) Severity;
pub fn STEPread(self: *STEPattribute, __opt: struct { in: *istream = cin, instances: [*c]InstMgrBase = null, addFileId: c_int = 0, currSch: [*c]const u8 = null, strict: bool = true,  },) Severity {
    return @"_1_STEPattribute_STEPread_"(self, __opt.in, __opt.instances, __opt.addFileId, __opt.currSch, __opt.strict);
}

extern fn @"_1_STEPattribute_asStr_"(self: *const STEPattribute, currSch: [*c]const u8) string;
/// return the attr value as a string
pub fn asStr(self: *const STEPattribute, __opt: struct { currSch: [*c]const u8 = null,  },) string {
    return @"_1_STEPattribute_asStr_"(self, __opt.currSch);
}

extern fn @"_2_STEPattribute_asStr_"(self: *const STEPattribute, __arg0: *cpp.String, __arg1: [*c]const u8) [*c]const u8;
pub fn asStr__Overload2(self: *const STEPattribute, __arg0: *cpp.String, __opt: struct { __arg1: [*c]const u8 = null,  },) [*c]const u8 {
    return @"_2_STEPattribute_asStr_"(self, __arg0, __opt.__arg1);
}

extern fn @"_1_STEPattribute_STEPwrite_"(self: *STEPattribute, out: *ostream, currSch: [*c]const u8) void;
/// put the attr value in ostream
pub fn STEPwrite(self: *STEPattribute, __opt: struct { out: *ostream = cout, currSch: [*c]const u8 = null,  },) void {
    return @"_1_STEPattribute_STEPwrite_"(self, __opt.out, __opt.currSch);
}

extern fn @"_1_STEPattribute_ShallowCopy_"(self: *STEPattribute, sa: [*c]const STEPattribute) void;
pub const ShallowCopy = @"_1_STEPattribute_ShallowCopy_";

extern fn @"_1_STEPattribute_set_null_"(self: *STEPattribute) Severity;
pub const set_null = @"_1_STEPattribute_set_null_";

extern fn @"_1_STEPattribute_Integer_"(self: *STEPattribute) [*c]SDAI_Integer;
/// These functions verify that the attribute contains the requested type and
/// returns a pointer. The pointer is null if the requested type does not match.
/// 
///@
///{
pub const Integer = @"_1_STEPattribute_Integer_";

extern fn @"_1_STEPattribute_Real_"(self: *STEPattribute) [*c]SDAI_Real;
pub const Real = @"_1_STEPattribute_Real_";

extern fn @"_1_STEPattribute_Number_"(self: *STEPattribute) [*c]SDAI_Real;
pub const Number = @"_1_STEPattribute_Number_";

extern fn @"_1_STEPattribute_String_"(self: *STEPattribute) [*c]SDAI_String;
pub const String = @"_1_STEPattribute_String_";

extern fn @"_1_STEPattribute_Binary_"(self: *STEPattribute) [*c]SDAI_Binary;
pub const Binary = @"_1_STEPattribute_Binary_";

extern fn @"_1_STEPattribute_Entity_"(self: *STEPattribute) [*c]SDAI_Application_instance;
pub const Entity = @"_1_STEPattribute_Entity_";

extern fn @"_1_STEPattribute_Aggregate_"(self: *STEPattribute) [*c]STEPaggregate;
pub const Aggregate = @"_1_STEPattribute_Aggregate_";

extern fn @"_1_STEPattribute_Enum_"(self: *STEPattribute) [*c]SDAI_Enum;
pub const Enum = @"_1_STEPattribute_Enum_";

extern fn @"_1_STEPattribute_Logical_"(self: *STEPattribute) [*c]SDAI_LOGICAL;
pub const Logical = @"_1_STEPattribute_Logical_";

extern fn @"_1_STEPattribute_Boolean_"(self: *STEPattribute) [*c]SDAI_BOOLEAN;
pub const Boolean = @"_1_STEPattribute_Boolean_";

extern fn @"_1_STEPattribute_Select_"(self: *STEPattribute) [*c]SDAI_Select;
pub const Select = @"_1_STEPattribute_Select_";

extern fn @"_1_STEPattribute_Undefined_"(self: *STEPattribute) [*c]SCLundefined;
pub const Undefined = @"_1_STEPattribute_Undefined_";

extern fn @"_2_STEPattribute_Integer_"(self: *STEPattribute, n: [*c]SDAI_Integer) void;
/// These functions allow setting the attribute value.
/// Attr type is verified using an assertion.
/// TODO should they check that the pointer was null?
/// what about ptr.c, which is ( SDAI_Application_instance ** ) ?
///@
///{
pub const Integer__Overload2 = @"_2_STEPattribute_Integer_";

extern fn @"_2_STEPattribute_Real_"(self: *STEPattribute, n: [*c]SDAI_Real) void;
pub const Real__Overload2 = @"_2_STEPattribute_Real_";

extern fn @"_2_STEPattribute_Number_"(self: *STEPattribute, n: [*c]SDAI_Real) void;
pub const Number__Overload2 = @"_2_STEPattribute_Number_";

extern fn @"_2_STEPattribute_String_"(self: *STEPattribute, str: [*c]SDAI_String) void;
pub const String__Overload2 = @"_2_STEPattribute_String_";

extern fn @"_2_STEPattribute_Binary_"(self: *STEPattribute, bin: [*c]SDAI_Binary) void;
pub const Binary__Overload2 = @"_2_STEPattribute_Binary_";

extern fn @"_2_STEPattribute_Entity_"(self: *STEPattribute, ent: [*c]SDAI_Application_instance) void;
pub const Entity__Overload2 = @"_2_STEPattribute_Entity_";

extern fn @"_2_STEPattribute_Aggregate_"(self: *STEPattribute, aggr: [*c]STEPaggregate) void;
pub const Aggregate__Overload2 = @"_2_STEPattribute_Aggregate_";

extern fn @"_2_STEPattribute_Enum_"(self: *STEPattribute, enu: [*c]SDAI_Enum) void;
pub const Enum__Overload2 = @"_2_STEPattribute_Enum_";

extern fn @"_2_STEPattribute_Logical_"(self: *STEPattribute, log: [*c]SDAI_LOGICAL) void;
pub const Logical__Overload2 = @"_2_STEPattribute_Logical_";

extern fn @"_2_STEPattribute_Boolean_"(self: *STEPattribute, boo: [*c]SDAI_BOOLEAN) void;
pub const Boolean__Overload2 = @"_2_STEPattribute_Boolean_";

extern fn @"_2_STEPattribute_Select_"(self: *STEPattribute, sel: [*c]SDAI_Select) void;
pub const Select__Overload2 = @"_2_STEPattribute_Select_";

extern fn @"_2_STEPattribute_Undefined_"(self: *STEPattribute, undef: [*c]SCLundefined) void;
pub const Undefined__Overload2 = @"_2_STEPattribute_Undefined_";

extern fn @"_1_STEPattribute_Nullable_"(self: *const STEPattribute) bool;
////////////// Return info on attr
pub const Nullable = @"_1_STEPattribute_Nullable_";

extern fn @"_1_STEPattribute_is_null_"(self: *const STEPattribute) bool;
pub const is_null = @"_1_STEPattribute_is_null_";

pub fn IsDerived(self: *const STEPattribute) bool {
    return self._derive;
}
pub fn RedefiningAttr__Overload2(self: *STEPattribute) [*c]STEPattribute {
    return self._redefAttr;
}
extern fn @"_1_STEPattribute_Name_"(self: *const STEPattribute) [*c]const u8;
pub const Name = @"_1_STEPattribute_Name_";

extern fn @"_1_STEPattribute_TypeName_"(self: *const STEPattribute) cpp.String;
pub const TypeName = @"_1_STEPattribute_TypeName_";

extern fn @"_1_STEPattribute_Type_"(self: *const STEPattribute) BASE_TYPE;
pub const Type = @"_1_STEPattribute_Type_";

extern fn @"_1_STEPattribute_NonRefType_"(self: *const STEPattribute) BASE_TYPE;
pub const NonRefType = @"_1_STEPattribute_NonRefType_";

extern fn @"_1_STEPattribute_BaseType_"(self: *const STEPattribute) BASE_TYPE;
pub const BaseType = @"_1_STEPattribute_BaseType_";

extern fn @"_1_STEPattribute_ReferentType_"(self: *const STEPattribute) [*c]const TypeDescriptor;
pub const ReferentType = @"_1_STEPattribute_ReferentType_";

pub fn Error(self: *STEPattribute) *ErrorDescriptor {
    return self._error;
}
pub fn ClearErrorMsg(self: *STEPattribute) void {
    self.ClearErrorMsg();
}
extern fn @"_1_STEPattribute_ValidLevel_"(self: *STEPattribute, attrValue: [*c]const u8, error: [*c]ErrorDescriptor, im: [*c]InstMgrBase, clearError: bool) Severity;
pub fn ValidLevel(self: *STEPattribute, attrValue: [*c]const u8, error: [*c]ErrorDescriptor, im: [*c]InstMgrBase, __opt: struct { clearError: bool = true,  },) Severity {
    return @"_1_STEPattribute_ValidLevel_"(self, attrValue, error, im, __opt.clearError);
}

extern fn @"_1_STEPattribute_init_"(a: *const STEPattribute) STEPattribute;
pub const init = @"_1_STEPattribute_init_";

) STEPattribute;
pub const init = @"_1_STEPattribute_init_";

extern fn @"_2_STEPattribute_init_"() STEPattribute;
pub const init2 = @"_2_STEPattribute_init_";

) STEPattribute;
pub const init2 = @"_2_STEPattribute_init_";

    extern fn @"_1_STEPattribute_deinit_"(self: *STEPattribute) void;
    pub const deinit = @"_1_STEPattribute_deinit_";

extern fn @"_3_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SDAI_Integer) STEPattribute;
pub const init3 = @"_3_STEPattribute_init_";

) STEPattribute;
pub const init3 = @"_3_STEPattribute_init_";

extern fn @"_4_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SDAI_Binary) STEPattribute;
pub const init4 = @"_4_STEPattribute_init_";

) STEPattribute;
pub const init4 = @"_4_STEPattribute_init_";

extern fn @"_5_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SDAI_String) STEPattribute;
pub const init5 = @"_5_STEPattribute_init_";

) STEPattribute;
pub const init5 = @"_5_STEPattribute_init_";

extern fn @"_6_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SDAI_Real) STEPattribute;
pub const init6 = @"_6_STEPattribute_init_";

) STEPattribute;
pub const init6 = @"_6_STEPattribute_init_";

extern fn @"_7_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c][*c]SDAI_Application_instance) STEPattribute;
pub const init7 = @"_7_STEPattribute_init_";

) STEPattribute;
pub const init7 = @"_7_STEPattribute_init_";

extern fn @"_8_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]STEPaggregate) STEPattribute;
pub const init8 = @"_8_STEPattribute_init_";

) STEPattribute;
pub const init8 = @"_8_STEPattribute_init_";

extern fn @"_9_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SDAI_Enum) STEPattribute;
pub const init9 = @"_9_STEPattribute_init_";

) STEPattribute;
pub const init9 = @"_9_STEPattribute_init_";

extern fn @"_10_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SDAI_Select) STEPattribute;
pub const init10 = @"_10_STEPattribute_init_";

) STEPattribute;
pub const init10 = @"_10_STEPattribute_init_";

extern fn @"_11_STEPattribute_init_"(d: *const class AttrDescriptor, p: [*c]SCLundefined) STEPattribute;
pub const init11 = @"_11_STEPattribute_init_";

) STEPattribute;
pub const init11 = @"_11_STEPattribute_init_";

extern fn @"_1_STEPattribute_eql_"(a1: *const STEPattribute, a2: *const STEPattribute) bool;
/// return true if attr types and values match
pub const eql = @"_1_STEPattribute_eql_";

extern fn @"_1_STEPattribute_notEql_"(a1: *const STEPattribute, a2: *const STEPattribute) bool;
pub const notEql = @"_1_STEPattribute_notEql_";

extern fn @"_1_STEPattribute_sameADesc_"(a1: *const STEPattribute, a2: *const STEPattribute) bool;
/// return true if aDesc's match (behavior of old operator==)
pub const sameADesc = @"_1_STEPattribute_sameADesc_";

};



// opaques

const InstMgrBase = anyopaque;
const SDAI_Application_instance = anyopaque;
const STEPaggregate = anyopaque;
const SCLundefined = anyopaque;
const TypeDescriptor = anyopaque;
const AttrDescriptor = anyopaque;
const EntityDescriptor = anyopaque;
