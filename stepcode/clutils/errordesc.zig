// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

pub const Severity = extern struct {
    bits: c_int = 0,

    pub const SEVERITY_MAX: Severity = .{ .bits = -5 };
    pub const SEVERITY_DUMP: Severity = .{ .bits = -4 };
    pub const SEVERITY_EXIT: Severity = .{ .bits = -3 };
    pub const SEVERITY_BUG: Severity = .{ .bits = -2 };
    pub const SEVERITY_INPUT_ERROR: Severity = .{ .bits = -1 };
    pub const SEVERITY_WARNING: Severity = .{ .bits = 0 };
    pub const SEVERITY_INCOMPLETE: Severity = .{ .bits = 1 };
    pub const SEVERITY_USERMSG: Severity = .{ .bits = 2 };
    pub const SEVERITY_NULL: Severity = .{ .bits = 3 };

    // pub usingnamespace cpp.FlagsMixin(Severity);
};

pub const DebugLevel = c_int;

///****************************************************************
///* Class:  ErrorDescriptor
///* Data Members:
///*    severity level of error
///*    user message
///*    detailed message
///* Description:
///*    the error is a detailed error message + a severity level
///*    also keeps a user message separately
///*    detailed message gets sent to ostream
///*    uses std::string class to keep the user messages
///*    keeps severity of error
///*    created with or without error
///* Status:
///****************************************************************
pub const ErrorDescriptor = extern struct {
    _userMsg: cpp.String,
    _detailMsg: cpp.String,
    _severity: Severity,

extern var _1_ErrorDescriptor__debug_level_: * DebugLevel;
pub const _debug_level = _1_ErrorDescriptor__debug_level_;

extern var _1_ErrorDescriptor__out_: * [*c]ostream;
pub const _out = _1_ErrorDescriptor__out_;

extern fn @"_1_ErrorDescriptor_init_"(s: Severity, d: DebugLevel) ErrorDescriptor;
pub const init = @"_1_ErrorDescriptor_init_";

) ErrorDescriptor;
pub const init = @"_1_ErrorDescriptor_init_";

    extern fn @"_1_ErrorDescriptor_deinit_"(self: *ErrorDescriptor) void;
    pub const deinit = @"_1_ErrorDescriptor_deinit_";

extern fn @"_1_ErrorDescriptor_PrintContents_"(self: *const ErrorDescriptor, out: *ostream) void;
pub fn PrintContents(self: *const ErrorDescriptor, __opt: struct { out: *ostream = cout,  },) void {
    return @"_1_ErrorDescriptor_PrintContents_"(self, __opt.out);
}

pub fn ClearErrorMsg(self: *ErrorDescriptor) void {
    self._severity = Severity.SEVERITY_NULL.bits;
    self.clear();
    self.clear();
}
pub fn severity(self: *const ErrorDescriptor) Severity {
    return self._severity;
}
// syntax errors:
// pub fn severity__Overload2(self: *ErrorDescriptor, s: Severity) Severity {
// return (self._severity = s);
// }
// 
extern fn @"_1_ErrorDescriptor_severityString_"(self: *const ErrorDescriptor) cpp.String;
pub const severityString = @"_1_ErrorDescriptor_severityString_";

extern fn @"_1_ErrorDescriptor_GetCorrSeverity_"(self: *ErrorDescriptor, s: [*c]const u8) Severity;
pub const GetCorrSeverity = @"_1_ErrorDescriptor_GetCorrSeverity_";

// syntax errors:
// pub fn GreaterSeverity(self: *ErrorDescriptor, s: Severity) Severity {
// return ( if ((@as(c_int, @intCast(s)) < @as(c_int, @intCast(self._severity)))) self._severity = s else self._severity );
// }
// 
pub fn UserMsg(self: *const ErrorDescriptor) cpp.String {
    return;
}
extern fn @"_2_ErrorDescriptor_UserMsg_"(self: *ErrorDescriptor, msg: [*c]const u8) void;
pub const UserMsg__Overload2 = @"_2_ErrorDescriptor_UserMsg_";

pub fn UserMsg__Overload3(self: *ErrorDescriptor, msg: cpp.String) void {
    self.assign(msg);
}
extern fn @"_1_ErrorDescriptor_AppendToUserMsg_"(self: *ErrorDescriptor, msg: [*c]const u8) void;
pub const AppendToUserMsg = @"_1_ErrorDescriptor_AppendToUserMsg_";

extern fn @"_2_ErrorDescriptor_AppendToUserMsg_"(self: *ErrorDescriptor, c: u8) void;
pub const AppendToUserMsg__Overload2 = @"_2_ErrorDescriptor_AppendToUserMsg_";

pub fn AppendToUserMsg__Overload3(self: *ErrorDescriptor, msg: *const cpp.String) void {
    self.append(msg);
}
extern fn @"_1_ErrorDescriptor_PrependToUserMsg_"(self: *ErrorDescriptor, msg: [*c]const u8) void;
pub const PrependToUserMsg = @"_1_ErrorDescriptor_PrependToUserMsg_";

pub fn DetailMsg(self: *const ErrorDescriptor) cpp.String {
    return;
}
pub fn DetailMsg__Overload2(self: *ErrorDescriptor, msg: cpp.String) void {
    self.assign(msg);
}
extern fn @"_3_ErrorDescriptor_DetailMsg_"(self: *ErrorDescriptor, msg: [*c]const u8) void;
pub const DetailMsg__Overload3 = @"_3_ErrorDescriptor_DetailMsg_";

extern fn @"_1_ErrorDescriptor_AppendToDetailMsg_"(self: *ErrorDescriptor, msg: [*c]const u8) void;
pub const AppendToDetailMsg = @"_1_ErrorDescriptor_AppendToDetailMsg_";

pub fn AppendToDetailMsg__Overload2(self: *ErrorDescriptor, msg: *const cpp.String) void {
    self.append(msg);
}
extern fn @"_1_ErrorDescriptor_PrependToDetailMsg_"(self: *ErrorDescriptor, msg: [*c]const u8) void;
pub const PrependToDetailMsg = @"_1_ErrorDescriptor_PrependToDetailMsg_";

extern fn @"_3_ErrorDescriptor_AppendToDetailMsg_"(self: *ErrorDescriptor, c: u8) void;
pub const AppendToDetailMsg__Overload3 = @"_3_ErrorDescriptor_AppendToDetailMsg_";

pub fn AppendFromErrorArg(self: *ErrorDescriptor, err: [*c]ErrorDescriptor) Severity {
    self.GreaterSeverity(self.severity());
    self.AppendToDetailMsg();
    self.AppendToUserMsg();
    return self.severity();
}
pub fn debug_level(self: *const ErrorDescriptor) DebugLevel {
    return _debug_level;
}
pub fn debug_level__Overload2(self: *ErrorDescriptor, d: DebugLevel) void {
    _debug_level = d;
}
pub fn SetOutput(self: *ErrorDescriptor, o: [*c]ostream) void {
    _out = o;
}
};

