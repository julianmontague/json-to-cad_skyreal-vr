// auto generated by c2z
#include "STEPfile.h"

extern "C" SDAI_Application_instance * _1_STEPfile_HeaderDefaultFileName_(::STEPfile* self) { return self->HeaderDefaultFileName(); }
extern "C" SDAI_Application_instance * _1_STEPfile_HeaderDefaultFileDescription_(::STEPfile* self) { return self->HeaderDefaultFileDescription(); }
extern "C" SDAI_Application_instance * _1_STEPfile_HeaderDefaultFileSchema_(::STEPfile* self) { return self->HeaderDefaultFileSchema(); }
extern "C" std::string _1_STEPfile_SetFileName_(::STEPfile* self, const std::string name) { return self->SetFileName(name); }
extern "C" std::string _1_STEPfile_TruncFileName_(const ::STEPfile *self, const std::string name) { return self->TruncFileName(name); }
extern "C" float _1_STEPfile_GetReadProgress_(const ::STEPfile *self) { return self->GetReadProgress(); }
extern "C" float _1_STEPfile_GetWriteProgress_(const ::STEPfile *self) { return self->GetWriteProgress(); }
extern "C" Severity _1_STEPfile_AppendEntityErrorMsg_(::STEPfile* self, ErrorDescriptor * e) { return self->AppendEntityErrorMsg(e); }
extern "C" int _1_STEPfile_SetFileType_(::STEPfile* self, FileTypeCode ft) { return self->SetFileType(ft); }
extern "C" Severity _1_STEPfile_ReadExchangeFile_(::STEPfile* self, const std::string filename, bool useTechCor) { return self->ReadExchangeFile(filename, useTechCor); }
extern "C" Severity _1_STEPfile_AppendExchangeFile_(::STEPfile* self, const std::string filename, bool useTechCor) { return self->AppendExchangeFile(filename, useTechCor); }
extern "C" Severity _1_STEPfile_ReadWorkingFile_(::STEPfile* self, const std::string filename, bool useTechCor) { return self->ReadWorkingFile(filename, useTechCor); }
extern "C" Severity _1_STEPfile_AppendWorkingFile_(::STEPfile* self, const std::string filename, bool useTechCor) { return self->AppendWorkingFile(filename, useTechCor); }
extern "C" Severity _1_STEPfile_AppendFile_(::STEPfile* self, istream * in, bool useTechCor) { return self->AppendFile(in, useTechCor); }
extern "C" Severity _1_STEPfile_WriteExchangeFile_(::STEPfile* self, ostream & out, int validate, int clearError, int writeComments) { return self->WriteExchangeFile(out, validate, clearError, writeComments); }
extern "C" Severity _2_STEPfile_WriteExchangeFile_(::STEPfile* self, const std::string filename, int validate, int clearError, int writeComments) { return self->WriteExchangeFile(filename, validate, clearError, writeComments); }
extern "C" Severity _1_STEPfile_WriteValuePairsFile_(::STEPfile* self, ostream & out, int validate, int clearError, int writeComments, int mixedCase) { return self->WriteValuePairsFile(out, validate, clearError, writeComments, mixedCase); }
extern "C" Severity _1_STEPfile_WriteWorkingFile_(::STEPfile* self, ostream & out, int clearError, int writeComments) { return self->WriteWorkingFile(out, clearError, writeComments); }
extern "C" Severity _2_STEPfile_WriteWorkingFile_(::STEPfile* self, const std::string filename, int clearError, int writeComments) { return self->WriteWorkingFile(filename, clearError, writeComments); }
extern "C" stateEnum _1_STEPfile_EntityWfState_(::STEPfile* self, char c) { return self->EntityWfState(c); }
extern "C" void _1_STEPfile_Renumber_(::STEPfile* self) { self->Renumber(); }
extern "C" ::STEPfile _1_STEPfile_init_(Registry & r, InstMgr & i, const std::string filename, bool strict) { return ::STEPfile(r, i, filename, strict); }
extern "C" void _1_STEPfile_deinit_(::STEPfile *self) { self->~STEPfile(); }
extern "C" std::string _1_STEPfile_schemaName_(::STEPfile* self) { return self->schemaName(); }
extern "C" istream * _1_STEPfile_OpenInputFile_(::STEPfile* self, const std::string filename) { return self->OpenInputFile(filename); }
extern "C" void _1_STEPfile_CloseInputFile_(::STEPfile* self, istream * in) { self->CloseInputFile(in); }
extern "C" Severity _1_STEPfile_ReadHeader_(::STEPfile* self, istream & in) { return self->ReadHeader(in); }
extern "C" Severity _1_STEPfile_HeaderVerifyInstances_(::STEPfile* self, InstMgr * im) { return self->HeaderVerifyInstances(im); }
extern "C" void _1_STEPfile_HeaderMergeInstances_(::STEPfile* self, InstMgr * im) { self->HeaderMergeInstances(im); }
extern "C" int _1_STEPfile_HeaderId_(::STEPfile* self, int increment) { return self->HeaderId(increment); }
extern "C" int _2_STEPfile_HeaderId_(::STEPfile* self, const char * nm) { return self->HeaderId(nm); }
extern "C" int _1_STEPfile_ReadData1_(::STEPfile* self, istream & in) { return self->ReadData1(in); }
extern "C" int _1_STEPfile_ReadData2_(::STEPfile* self, istream & in, bool useTechCor) { return self->ReadData2(in, useTechCor); }
extern "C" int _1_STEPfile_ReadWorkingData1_(::STEPfile* self, istream & in) { return self->ReadWorkingData1(in); }
extern "C" int _1_STEPfile_ReadWorkingData2_(::STEPfile* self, istream & in, bool useTechCor) { return self->ReadWorkingData2(in, useTechCor); }
extern "C" void _1_STEPfile_ReadRestOfFile_(::STEPfile* self, istream & in) { self->ReadRestOfFile(in); }
extern "C" SDAI_Application_instance * _1_STEPfile_CreateInstance_(::STEPfile* self, istream & in, ostream & out) { return self->CreateInstance(in, out); }
extern "C" SDAI_Application_instance * _1_STEPfile_CreateSubSuperInstance_(::STEPfile* self, istream & in, int fileid, ErrorDescriptor & __arg2) { return self->CreateSubSuperInstance(in, fileid, __arg2); }
extern "C" SDAI_Application_instance * _1_STEPfile_ReadInstance_(::STEPfile* self, istream & in, ostream & out, std::string & cmtStr, bool useTechCor) { return self->ReadInstance(in, out, cmtStr, useTechCor); }
extern "C" Severity _1_STEPfile_CreateScopeInstances_(::STEPfile* self, istream & in, SDAI_Application_instance_ptr ** scopelist) { return self->CreateScopeInstances(in, scopelist); }
extern "C" Severity _1_STEPfile_ReadScopeInstances_(::STEPfile* self, istream & in) { return self->ReadScopeInstances(in); }
extern "C" int _1_STEPfile_FindDataSection_(::STEPfile* self, istream & in) { return self->FindDataSection(in); }
extern "C" int _1_STEPfile_FindHeaderSection_(::STEPfile* self, istream & in) { return self->FindHeaderSection(in); }
extern "C" void _1_STEPfile_WriteWorkingData_(::STEPfile* self, ostream & out, int writeComments) { self->WriteWorkingData(out, writeComments); }
extern "C" ofstream * _1_STEPfile_OpenOutputFile_(::STEPfile* self, const std::string filename) { return self->OpenOutputFile(filename); }
extern "C" void _1_STEPfile_CloseOutputFile_(::STEPfile* self, ostream * out) { self->CloseOutputFile(out); }
extern "C" void _1_STEPfile_WriteHeader_(::STEPfile* self, ostream & out) { self->WriteHeader(out); }
extern "C" void _1_STEPfile_WriteHeaderInstance_(::STEPfile* self, SDAI_Application_instance * obj, ostream & out) { self->WriteHeaderInstance(obj, out); }
extern "C" void _1_STEPfile_WriteHeaderInstanceFileName_(::STEPfile* self, ostream & out) { self->WriteHeaderInstanceFileName(out); }
extern "C" void _1_STEPfile_WriteHeaderInstanceFileDescription_(::STEPfile* self, ostream & out) { self->WriteHeaderInstanceFileDescription(out); }
extern "C" void _1_STEPfile_WriteHeaderInstanceFileSchema_(::STEPfile* self, ostream & out) { self->WriteHeaderInstanceFileSchema(out); }
extern "C" void _1_STEPfile_WriteData_(::STEPfile* self, ostream & out, int writeComments) { self->WriteData(out, writeComments); }
extern "C" void _1_STEPfile_WriteValuePairsData_(::STEPfile* self, ostream & out, int writeComments, int mixedCase) { self->WriteValuePairsData(out, writeComments, mixedCase); }
extern "C" int _1_STEPfile_IncrementFileId_(::STEPfile* self, int fileid) { return self->IncrementFileId(fileid); }
extern "C" void _1_STEPfile_SetFileIdIncrement_(::STEPfile* self) { self->SetFileIdIncrement(); }
extern "C" void _1_STEPfile_MakeBackupFile_(::STEPfile* self) { self->MakeBackupFile(); }
